function isAbsolute(filename) {
    return (filename[0] == '/');
}
exports.isAbsolute = isAbsolute;
function isRelative(filename) {
    return (filename[0] == '.');
}
exports.isRelative = isRelative;
function isAmbientImport(filename) {
    return (isAmbient(filename) && !isTypescriptDeclaration(filename));
}
exports.isAmbientImport = isAmbientImport;
function isAmbientReference(filename) {
    return (isAmbient(filename) && isTypescriptDeclaration(filename));
}
exports.isAmbientReference = isAmbientReference;
function isAmbient(filename) {
    return (!isRelative(filename) && !isAbsolute(filename));
}
exports.isAmbient = isAmbient;
var typescriptRegex = /\.tsx?$/i;
function isTypescript(filename) {
    return typescriptRegex.test(filename);
}
exports.isTypescript = isTypescript;
var javascriptRegex = /\.js$/i;
function isJavaScript(filename) {
    return javascriptRegex.test(filename);
}
exports.isJavaScript = isJavaScript;
var mapRegex = /\.map$/i;
function isSourceMap(filename) {
    return mapRegex.test(filename);
}
exports.isSourceMap = isSourceMap;
var declarationRegex = /\.d\.tsx?$/i;
function isTypescriptDeclaration(filename) {
    return declarationRegex.test(filename);
}
exports.isTypescriptDeclaration = isTypescriptDeclaration;
var htmlRegex = /\.html$/i;
function isHtml(filename) {
    return htmlRegex.test(filename);
}
exports.isHtml = isHtml;
function tsToJs(tsFile) {
    return tsFile.replace(typescriptRegex, '.js');
}
exports.tsToJs = tsToJs;
function tsToJsMap(tsFile) {
    return tsFile.replace(typescriptRegex, '.js.map');
}
exports.tsToJsMap = tsToJsMap;
function stripDoubleExtension(normalized) {
    var parts = normalized.split('.');
    if (parts.length > 1) {
        var extensions = ["js", "jsx", "ts", "tsx", "json"];
        if (extensions.indexOf(parts[parts.length - 2]) >= 0) {
            return parts.slice(0, -1).join('.');
        }
    }
    return normalized;
}
exports.stripDoubleExtension = stripDoubleExtension;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOlsiaXNBYnNvbHV0ZSIsImlzUmVsYXRpdmUiLCJpc0FtYmllbnRJbXBvcnQiLCJpc0FtYmllbnRSZWZlcmVuY2UiLCJpc0FtYmllbnQiLCJpc1R5cGVzY3JpcHQiLCJpc0phdmFTY3JpcHQiLCJpc1NvdXJjZU1hcCIsImlzVHlwZXNjcmlwdERlY2xhcmF0aW9uIiwiaXNIdG1sIiwidHNUb0pzIiwidHNUb0pzTWFwIiwic3RyaXBEb3VibGVFeHRlbnNpb24iXSwibWFwcGluZ3MiOiJBQUNBLG9CQUEyQixRQUFnQjtJQUMxQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7QUFDN0JBLENBQUNBO0FBRmUsa0JBQVUsYUFFekIsQ0FBQTtBQUVELG9CQUEyQixRQUFnQjtJQUMxQ0MsTUFBTUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7QUFDN0JBLENBQUNBO0FBRmUsa0JBQVUsYUFFekIsQ0FBQTtBQUVELHlCQUFnQyxRQUFnQjtJQUMvQ0MsTUFBTUEsQ0FBQ0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUNwRUEsQ0FBQ0E7QUFGZSx1QkFBZSxrQkFFOUIsQ0FBQTtBQUVELDRCQUFtQyxRQUFnQjtJQUNsREMsTUFBTUEsQ0FBQ0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsdUJBQXVCQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUNuRUEsQ0FBQ0E7QUFGZSwwQkFBa0IscUJBRWpDLENBQUE7QUFFRCxtQkFBMEIsUUFBZ0I7SUFDekNDLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLFVBQVVBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO0FBQ3pEQSxDQUFDQTtBQUZlLGlCQUFTLFlBRXhCLENBQUE7QUFFRCxJQUFJLGVBQWUsR0FBRyxVQUFVLENBQUM7QUFDakMsc0JBQTZCLFFBQWdCO0lBQzVDQyxNQUFNQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtBQUN2Q0EsQ0FBQ0E7QUFGZSxvQkFBWSxlQUUzQixDQUFBO0FBRUQsSUFBSSxlQUFlLEdBQUcsUUFBUSxDQUFDO0FBQy9CLHNCQUE2QixRQUFnQjtJQUM1Q0MsTUFBTUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7QUFDdkNBLENBQUNBO0FBRmUsb0JBQVksZUFFM0IsQ0FBQTtBQUVELElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQztBQUN6QixxQkFBNEIsUUFBZ0I7SUFDM0NDLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0FBQ2hDQSxDQUFDQTtBQUZlLG1CQUFXLGNBRTFCLENBQUE7QUFFRCxJQUFJLGdCQUFnQixHQUFHLGFBQWEsQ0FBQztBQUNyQyxpQ0FBd0MsUUFBZ0I7SUFDdkRDLE1BQU1BLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7QUFDeENBLENBQUNBO0FBRmUsK0JBQXVCLDBCQUV0QyxDQUFBO0FBRUQsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDO0FBQzNCLGdCQUF1QixRQUFnQjtJQUN0Q0MsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7QUFDakNBLENBQUNBO0FBRmUsY0FBTSxTQUVyQixDQUFBO0FBRUQsZ0JBQXVCLE1BQWM7SUFDcENDLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLGVBQWVBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO0FBQy9DQSxDQUFDQTtBQUZlLGNBQU0sU0FFckIsQ0FBQTtBQUVELG1CQUEwQixNQUFjO0lBQ3ZDQyxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxlQUFlQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQTtBQUNuREEsQ0FBQ0E7QUFGZSxpQkFBUyxZQUV4QixDQUFBO0FBRUQsOEJBQXFDLFVBQWtCO0lBQ3REQyxJQUFNQSxLQUFLQSxHQUFHQSxVQUFVQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUVwQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLElBQU1BLFVBQVVBLEdBQUdBLENBQUVBLElBQUlBLEVBQUVBLEtBQUtBLEVBQUVBLElBQUlBLEVBQUVBLEtBQUtBLEVBQUVBLE1BQU1BLENBQUVBLENBQUNBO1FBRXhEQSxFQUFFQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNyREEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDckNBLENBQUNBO0lBQ0ZBLENBQUNBO0lBQ0RBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBO0FBQ25CQSxDQUFDQTtBQVhlLDRCQUFvQix1QkFXbkMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qICovXG5leHBvcnQgZnVuY3Rpb24gaXNBYnNvbHV0ZShmaWxlbmFtZTogc3RyaW5nKSB7XG5cdHJldHVybiAoZmlsZW5hbWVbMF0gPT0gJy8nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVsYXRpdmUoZmlsZW5hbWU6IHN0cmluZykge1xuXHRyZXR1cm4gKGZpbGVuYW1lWzBdID09ICcuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FtYmllbnRJbXBvcnQoZmlsZW5hbWU6IHN0cmluZykge1xuXHRyZXR1cm4gKGlzQW1iaWVudChmaWxlbmFtZSkgJiYgIWlzVHlwZXNjcmlwdERlY2xhcmF0aW9uKGZpbGVuYW1lKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FtYmllbnRSZWZlcmVuY2UoZmlsZW5hbWU6IHN0cmluZykge1xuXHRyZXR1cm4gKGlzQW1iaWVudChmaWxlbmFtZSkgJiYgaXNUeXBlc2NyaXB0RGVjbGFyYXRpb24oZmlsZW5hbWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQW1iaWVudChmaWxlbmFtZTogc3RyaW5nKSB7XG5cdHJldHVybiAoIWlzUmVsYXRpdmUoZmlsZW5hbWUpICYmICFpc0Fic29sdXRlKGZpbGVuYW1lKSk7XG59XG5cbnZhciB0eXBlc2NyaXB0UmVnZXggPSAvXFwudHN4PyQvaTtcbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVzY3JpcHQoZmlsZW5hbWU6IHN0cmluZykge1xuXHRyZXR1cm4gdHlwZXNjcmlwdFJlZ2V4LnRlc3QoZmlsZW5hbWUpO1xufVxuXG52YXIgamF2YXNjcmlwdFJlZ2V4ID0gL1xcLmpzJC9pO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSmF2YVNjcmlwdChmaWxlbmFtZTogc3RyaW5nKSB7XG5cdHJldHVybiBqYXZhc2NyaXB0UmVnZXgudGVzdChmaWxlbmFtZSk7XG59XG5cbnZhciBtYXBSZWdleCA9IC9cXC5tYXAkL2k7XG5leHBvcnQgZnVuY3Rpb24gaXNTb3VyY2VNYXAoZmlsZW5hbWU6IHN0cmluZykge1xuXHRyZXR1cm4gbWFwUmVnZXgudGVzdChmaWxlbmFtZSk7XG59XG5cbnZhciBkZWNsYXJhdGlvblJlZ2V4ID0gL1xcLmRcXC50c3g/JC9pO1xuZXhwb3J0IGZ1bmN0aW9uIGlzVHlwZXNjcmlwdERlY2xhcmF0aW9uKGZpbGVuYW1lOiBzdHJpbmcpIHtcblx0cmV0dXJuIGRlY2xhcmF0aW9uUmVnZXgudGVzdChmaWxlbmFtZSk7XG59XG5cbnZhciBodG1sUmVnZXggPSAvXFwuaHRtbCQvaTtcbmV4cG9ydCBmdW5jdGlvbiBpc0h0bWwoZmlsZW5hbWU6IHN0cmluZykge1xuXHRyZXR1cm4gaHRtbFJlZ2V4LnRlc3QoZmlsZW5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHNUb0pzKHRzRmlsZTogc3RyaW5nKSB7XG5cdHJldHVybiB0c0ZpbGUucmVwbGFjZSh0eXBlc2NyaXB0UmVnZXgsICcuanMnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRzVG9Kc01hcCh0c0ZpbGU6IHN0cmluZykge1xuXHRyZXR1cm4gdHNGaWxlLnJlcGxhY2UodHlwZXNjcmlwdFJlZ2V4LCAnLmpzLm1hcCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBEb3VibGVFeHRlbnNpb24obm9ybWFsaXplZDogc3RyaW5nKSB7XG5cdGNvbnN0IHBhcnRzID0gbm9ybWFsaXplZC5zcGxpdCgnLicpO1xuXG5cdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0Y29uc3QgZXh0ZW5zaW9ucyA9IFsgXCJqc1wiLCBcImpzeFwiLCBcInRzXCIsIFwidHN4XCIsIFwianNvblwiIF07XG5cblx0XHRpZiAoZXh0ZW5zaW9ucy5pbmRleE9mKHBhcnRzW3BhcnRzLmxlbmd0aCAtMl0pID49IDApIHtcblx0XHRcdHJldHVybiBwYXJ0cy5zbGljZSgwLCAtMSkuam9pbignLicpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbm9ybWFsaXplZDtcbn1cbiJdfQ==