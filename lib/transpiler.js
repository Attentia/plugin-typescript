var ts = require('typescript');
var logger_1 = require('./logger');
var utils_1 = require("./utils");
var logger = new logger_1.default({ debug: false });
var Transpiler = (function () {
    function Transpiler(host) {
        this._host = host;
        this._options = ts.clone(this._host.options);
        if (this._options.sourceMap === undefined)
            this._options.sourceMap = this._options.inlineSourceMap;
        if (this._options.sourceMap === undefined)
            this._options.sourceMap = true;
        this._options.inlineSourceMap = false;
        this._options.declaration = false;
        this._options.isolatedModules = true;
        this._options.module = ts.ModuleKind.System;
    }
    Transpiler.prototype.transpile = function (sourceName, source) {
        logger.debug("transpiling " + sourceName);
        var sourceFile = this._host.addFile(sourceName, source);
        var program = ts.createProgram([sourceName], this._options, this._host);
        var jstext = undefined;
        var maptext = undefined;
        var emitResult = program.emit(undefined, function (outputName, output) {
            if (utils_1.isJavaScript(outputName))
                jstext = output.slice(0, output.lastIndexOf("//#"));
            else if (utils_1.isSourceMap(outputName))
                maptext = output;
            else
                throw new Error("unexpected ouput file " + outputName);
        });
        var diagnostics = program.getSyntacticDiagnostics().concat(emitResult.diagnostics);
        return {
            failure: this.hasError(diagnostics),
            errors: diagnostics,
            js: jstext,
            sourceMap: maptext
        };
    };
    Transpiler.prototype.hasError = function (diags) {
        return diags.some(function (diag) { return (diag.category === ts.DiagnosticCategory.Error); });
    };
    return Transpiler;
})();
exports.Transpiler = Transpiler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNwaWxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90cmFuc3BpbGVyLnRzIl0sIm5hbWVzIjpbIlRyYW5zcGlsZXIiLCJUcmFuc3BpbGVyLmNvbnN0cnVjdG9yIiwiVHJhbnNwaWxlci50cmFuc3BpbGUiLCJUcmFuc3BpbGVyLmhhc0Vycm9yIl0sIm1hcHBpbmdzIjoiQUFDQSxJQUFZLEVBQUUsV0FBTSxZQUFZLENBQUMsQ0FBQTtBQUVqQyx1QkFBbUIsVUFBVSxDQUFDLENBQUE7QUFDOUIsc0JBQXdDLFNBQVMsQ0FBQyxDQUFBO0FBRWxELElBQUksTUFBTSxHQUFHLElBQUksZ0JBQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBUzFDO0lBSUNBLG9CQUFZQSxJQUFrQkE7UUFDN0JDLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBO1FBRWxCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFTQSxFQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUVwREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsS0FBS0EsU0FBU0EsQ0FBQ0E7WUFDekNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLGVBQWVBLENBQUNBO1FBRXpEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxLQUFLQSxTQUFTQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFaENBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLGVBQWVBLEdBQUdBLEtBQUtBLENBQUNBO1FBQ3RDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxXQUFXQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUNsQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsZUFBZUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDckNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLEdBQUdBLEVBQUVBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLENBQUNBO0lBQzdDQSxDQUFDQTtJQUVNRCw4QkFBU0EsR0FBaEJBLFVBQWlCQSxVQUFrQkEsRUFBRUEsTUFBY0E7UUFDbERFLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLGlCQUFlQSxVQUFZQSxDQUFDQSxDQUFDQTtRQUUxQ0EsSUFBSUEsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBVUEsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDeERBLElBQUlBLE9BQU9BLEdBQUdBLEVBQUVBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLFVBQVVBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1FBRXhFQSxJQUFJQSxNQUFNQSxHQUFXQSxTQUFTQSxDQUFDQTtRQUMvQkEsSUFBSUEsT0FBT0EsR0FBV0EsU0FBU0EsQ0FBQ0E7UUFHaENBLElBQUlBLFVBQVVBLEdBQUdBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEVBQUVBLFVBQUNBLFVBQVVBLEVBQUVBLE1BQU1BO1lBQzNEQSxFQUFFQSxDQUFDQSxDQUFDQSxvQkFBWUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzVCQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNyREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsbUJBQVdBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO2dCQUNoQ0EsT0FBT0EsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDbEJBLElBQUlBO2dCQUNIQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSwyQkFBeUJBLFVBQVlBLENBQUNBLENBQUFBO1FBQ3hEQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVIQSxJQUFJQSxXQUFXQSxHQUFHQSxPQUFPQSxDQUFDQSx1QkFBdUJBLEVBQUVBLENBQUNBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1FBRW5GQSxNQUFNQSxDQUFDQTtZQUNOQSxPQUFPQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxXQUFXQSxDQUFDQTtZQUNuQ0EsTUFBTUEsRUFBRUEsV0FBV0E7WUFDbkJBLEVBQUVBLEVBQUVBLE1BQU1BO1lBQ1ZBLFNBQVNBLEVBQUVBLE9BQU9BO1NBQ2xCQSxDQUFBQTtJQUNGQSxDQUFDQTtJQUVPRiw2QkFBUUEsR0FBaEJBLFVBQWlCQSxLQUEyQkE7UUFDM0NHLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLFVBQUFBLElBQUlBLElBQUlBLE9BQUFBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEtBQUtBLEVBQUVBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBL0NBLENBQStDQSxDQUFDQSxDQUFBQTtJQUMzRUEsQ0FBQ0E7SUFDRkgsaUJBQUNBO0FBQURBLENBQUNBLEFBckRELElBcURDO0FBckRZLGtCQUFVLGFBcUR0QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogKi9cbmltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IHtDb21waWxlckhvc3QsIENvbWJpbmVkT3B0aW9uc30gZnJvbSAnLi9jb21waWxlci1ob3N0JztcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHtpc0phdmFTY3JpcHQsIGlzU291cmNlTWFwfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5sZXQgbG9nZ2VyID0gbmV3IExvZ2dlcih7IGRlYnVnOiBmYWxzZSB9KTtcblxuaW50ZXJmYWNlIFRyYW5zcGlsZVJlc3VsdCB7XG5cdGZhaWx1cmU6IGJvb2xlYW47XG5cdGVycm9yczogQXJyYXk8dHMuRGlhZ25vc3RpYz47XG5cdGpzOiBzdHJpbmc7XG5cdHNvdXJjZU1hcDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgVHJhbnNwaWxlciB7XG5cdHByaXZhdGUgX2hvc3Q6IENvbXBpbGVySG9zdDtcblx0cHJpdmF0ZSBfb3B0aW9uczogQ29tYmluZWRPcHRpb25zO1xuXG5cdGNvbnN0cnVjdG9yKGhvc3Q6IENvbXBpbGVySG9zdCkge1xuXHRcdHRoaXMuX2hvc3QgPSBob3N0O1xuXG5cdFx0dGhpcy5fb3B0aW9ucyA9ICg8YW55PnRzKS5jbG9uZSh0aGlzLl9ob3N0Lm9wdGlvbnMpO1xuXG5cdFx0aWYgKHRoaXMuX29wdGlvbnMuc291cmNlTWFwID09PSB1bmRlZmluZWQpXG5cdFx0XHR0aGlzLl9vcHRpb25zLnNvdXJjZU1hcCA9IHRoaXMuX29wdGlvbnMuaW5saW5lU291cmNlTWFwO1xuXG5cdFx0aWYgKHRoaXMuX29wdGlvbnMuc291cmNlTWFwID09PSB1bmRlZmluZWQpXG5cdFx0XHR0aGlzLl9vcHRpb25zLnNvdXJjZU1hcCA9IHRydWU7XG5cblx0XHR0aGlzLl9vcHRpb25zLmlubGluZVNvdXJjZU1hcCA9IGZhbHNlO1xuXHRcdHRoaXMuX29wdGlvbnMuZGVjbGFyYXRpb24gPSBmYWxzZTtcblx0XHR0aGlzLl9vcHRpb25zLmlzb2xhdGVkTW9kdWxlcyA9IHRydWU7XG5cdFx0dGhpcy5fb3B0aW9ucy5tb2R1bGUgPSB0cy5Nb2R1bGVLaW5kLlN5c3RlbTtcblx0fVxuXG5cdHB1YmxpYyB0cmFuc3BpbGUoc291cmNlTmFtZTogc3RyaW5nLCBzb3VyY2U6IHN0cmluZyk6IFRyYW5zcGlsZVJlc3VsdCB7XG5cdFx0bG9nZ2VyLmRlYnVnKGB0cmFuc3BpbGluZyAke3NvdXJjZU5hbWV9YCk7XG5cblx0XHRsZXQgc291cmNlRmlsZSA9IHRoaXMuX2hvc3QuYWRkRmlsZShzb3VyY2VOYW1lLCBzb3VyY2UpO1xuXHRcdGxldCBwcm9ncmFtID0gdHMuY3JlYXRlUHJvZ3JhbShbc291cmNlTmFtZV0sIHRoaXMuX29wdGlvbnMsIHRoaXMuX2hvc3QpO1xuXG5cdFx0bGV0IGpzdGV4dDogc3RyaW5nID0gdW5kZWZpbmVkO1xuXHRcdGxldCBtYXB0ZXh0OiBzdHJpbmcgPSB1bmRlZmluZWQ7XG5cblx0XHQvLyBFbWl0XG5cdFx0bGV0IGVtaXRSZXN1bHQgPSBwcm9ncmFtLmVtaXQodW5kZWZpbmVkLCAob3V0cHV0TmFtZSwgb3V0cHV0KSA9PiB7XG5cdFx0XHRpZiAoaXNKYXZhU2NyaXB0KG91dHB1dE5hbWUpKVxuXHRcdFx0XHRqc3RleHQgPSBvdXRwdXQuc2xpY2UoMCwgb3V0cHV0Lmxhc3RJbmRleE9mKFwiLy8jXCIpKTsgLy8gcmVtb3ZlIHNvdXJjZU1hcHBpbmdVUkxcblx0XHRcdGVsc2UgaWYgKGlzU291cmNlTWFwKG91dHB1dE5hbWUpKVxuXHRcdFx0XHRtYXB0ZXh0ID0gb3V0cHV0O1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgb3VwdXQgZmlsZSAke291dHB1dE5hbWV9YClcblx0XHR9KTtcblxuXHRcdGxldCBkaWFnbm9zdGljcyA9IHByb2dyYW0uZ2V0U3ludGFjdGljRGlhZ25vc3RpY3MoKS5jb25jYXQoZW1pdFJlc3VsdC5kaWFnbm9zdGljcyk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0ZmFpbHVyZTogdGhpcy5oYXNFcnJvcihkaWFnbm9zdGljcyksXG5cdFx0XHRlcnJvcnM6IGRpYWdub3N0aWNzLFxuXHRcdFx0anM6IGpzdGV4dCxcblx0XHRcdHNvdXJjZU1hcDogbWFwdGV4dFxuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgaGFzRXJyb3IoZGlhZ3M6IEFycmF5PHRzLkRpYWdub3N0aWM+KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIGRpYWdzLnNvbWUoZGlhZyA9PiAoZGlhZy5jYXRlZ29yeSA9PT0gdHMuRGlhZ25vc3RpY0NhdGVnb3J5LkVycm9yKSlcblx0fVxufVxuIl19