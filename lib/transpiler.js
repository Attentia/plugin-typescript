var ts = require('typescript');
var logger_1 = require('./logger');
var utils_1 = require("./utils");
var logger = new logger_1.default({ debug: false });
var Transpiler = (function () {
    function Transpiler(host) {
        this._host = host;
        this._options = ts.clone(this._host.options);
        if (this._options.sourceMap === undefined)
            this._options.sourceMap = this._options.inlineSourceMap;
        if (this._options.sourceMap === undefined)
            this._options.sourceMap = true;
        this._options.inlineSourceMap = false;
        this._options.declaration = false;
        this._options.isolatedModules = true;
        this._options.module = 4;
    }
    Transpiler.prototype.transpile = function (sourceName, source) {
        logger.debug("transpiling " + sourceName);
        var sourceFile = this._host.addFile(sourceName, source);
        var program = ts.createProgram([sourceName], this._options, this._host);
        var jstext = undefined;
        var maptext = undefined;
        var emitResult = program.emit(undefined, function (outputName, output) {
            if (utils_1.isJavaScript(outputName))
                jstext = output.slice(0, output.lastIndexOf("//#"));
            else if (utils_1.isSourceMap(outputName))
                maptext = output;
            else
                throw new Error("unexpected ouput file " + outputName);
        });
        var diagnostics = program.getSyntacticDiagnostics().concat(emitResult.diagnostics);
        return {
            failure: this.hasError(diagnostics),
            errors: diagnostics,
            js: jstext,
            sourceMap: maptext
        };
    };
    Transpiler.prototype.hasError = function (diags) {
        return diags.some(function (diag) { return (diag.category === ts.DiagnosticCategory.Error); });
    };
    return Transpiler;
})();
exports.Transpiler = Transpiler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNwaWxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90cmFuc3BpbGVyLnRzIl0sIm5hbWVzIjpbIlRyYW5zcGlsZXIiLCJUcmFuc3BpbGVyLmNvbnN0cnVjdG9yIiwiVHJhbnNwaWxlci50cmFuc3BpbGUiLCJUcmFuc3BpbGVyLmhhc0Vycm9yIl0sIm1hcHBpbmdzIjoiQUFDQSxJQUFZLEVBQUUsV0FBTSxZQUFZLENBQUMsQ0FBQTtBQUVqQyx1QkFBbUIsVUFBVSxDQUFDLENBQUE7QUFDOUIsc0JBQXdDLFNBQVMsQ0FBQyxDQUFBO0FBRWxELElBQUksTUFBTSxHQUFHLElBQUksZ0JBQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBUzFDO0lBSUNBLG9CQUFZQSxJQUFrQkE7UUFDN0JDLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBO1FBRWxCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFTQSxFQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUVwREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsS0FBS0EsU0FBU0EsQ0FBQ0E7WUFDekNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLGVBQWVBLENBQUNBO1FBRXpEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxLQUFLQSxTQUFTQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFaENBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLGVBQWVBLEdBQUdBLEtBQUtBLENBQUNBO1FBQ3RDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxXQUFXQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUNsQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsZUFBZUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDckNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLEdBQUdBLENBQW9CQSxDQUFDQTtJQUM3Q0EsQ0FBQ0E7SUFFTUQsOEJBQVNBLEdBQWhCQSxVQUFpQkEsVUFBa0JBLEVBQUVBLE1BQWNBO1FBQ2xERSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxpQkFBZUEsVUFBWUEsQ0FBQ0EsQ0FBQ0E7UUFFMUNBLElBQUlBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLFVBQVVBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO1FBQ3hEQSxJQUFJQSxPQUFPQSxHQUFHQSxFQUFFQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUV4RUEsSUFBSUEsTUFBTUEsR0FBV0EsU0FBU0EsQ0FBQ0E7UUFDL0JBLElBQUlBLE9BQU9BLEdBQVdBLFNBQVNBLENBQUNBO1FBR2hDQSxJQUFJQSxVQUFVQSxHQUFHQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxVQUFDQSxVQUFVQSxFQUFFQSxNQUFNQTtZQUMzREEsRUFBRUEsQ0FBQ0EsQ0FBQ0Esb0JBQVlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO2dCQUM1QkEsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDckRBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLG1CQUFXQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtnQkFDaENBLE9BQU9BLEdBQUdBLE1BQU1BLENBQUNBO1lBQ2xCQSxJQUFJQTtnQkFDSEEsTUFBTUEsSUFBSUEsS0FBS0EsQ0FBQ0EsMkJBQXlCQSxVQUFZQSxDQUFDQSxDQUFBQTtRQUN4REEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFSEEsSUFBSUEsV0FBV0EsR0FBR0EsT0FBT0EsQ0FBQ0EsdUJBQXVCQSxFQUFFQSxDQUFDQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtRQUVuRkEsTUFBTUEsQ0FBQ0E7WUFDTkEsT0FBT0EsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7WUFDbkNBLE1BQU1BLEVBQUVBLFdBQVdBO1lBQ25CQSxFQUFFQSxFQUFFQSxNQUFNQTtZQUNWQSxTQUFTQSxFQUFFQSxPQUFPQTtTQUNsQkEsQ0FBQUE7SUFDRkEsQ0FBQ0E7SUFFT0YsNkJBQVFBLEdBQWhCQSxVQUFpQkEsS0FBMkJBO1FBQzNDRyxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFBQSxJQUFJQSxJQUFJQSxPQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxLQUFLQSxFQUFFQSxDQUFDQSxrQkFBa0JBLENBQUNBLEtBQUtBLENBQUNBLEVBQS9DQSxDQUErQ0EsQ0FBQ0EsQ0FBQUE7SUFDM0VBLENBQUNBO0lBQ0ZILGlCQUFDQTtBQUFEQSxDQUFDQSxBQXJERCxJQXFEQztBQXJEWSxrQkFBVSxhQXFEdEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qICovXG5pbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcbmltcG9ydCB7Q29tcGlsZXJIb3N0LCBDb21iaW5lZE9wdGlvbnN9IGZyb20gJy4vY29tcGlsZXItaG9zdCc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7aXNKYXZhU2NyaXB0LCBpc1NvdXJjZU1hcH0gZnJvbSBcIi4vdXRpbHNcIjtcblxubGV0IGxvZ2dlciA9IG5ldyBMb2dnZXIoeyBkZWJ1ZzogZmFsc2UgfSk7XG5cbmludGVyZmFjZSBUcmFuc3BpbGVSZXN1bHQge1xuXHRmYWlsdXJlOiBib29sZWFuO1xuXHRlcnJvcnM6IEFycmF5PHRzLkRpYWdub3N0aWM+O1xuXHRqczogc3RyaW5nO1xuXHRzb3VyY2VNYXA6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFRyYW5zcGlsZXIge1xuXHRwcml2YXRlIF9ob3N0OiBDb21waWxlckhvc3Q7XG5cdHByaXZhdGUgX29wdGlvbnM6IENvbWJpbmVkT3B0aW9ucztcblxuXHRjb25zdHJ1Y3Rvcihob3N0OiBDb21waWxlckhvc3QpIHtcblx0XHR0aGlzLl9ob3N0ID0gaG9zdDtcblxuXHRcdHRoaXMuX29wdGlvbnMgPSAoPGFueT50cykuY2xvbmUodGhpcy5faG9zdC5vcHRpb25zKTtcblxuXHRcdGlmICh0aGlzLl9vcHRpb25zLnNvdXJjZU1hcCA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0dGhpcy5fb3B0aW9ucy5zb3VyY2VNYXAgPSB0aGlzLl9vcHRpb25zLmlubGluZVNvdXJjZU1hcDtcblxuXHRcdGlmICh0aGlzLl9vcHRpb25zLnNvdXJjZU1hcCA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0dGhpcy5fb3B0aW9ucy5zb3VyY2VNYXAgPSB0cnVlO1xuXG5cdFx0dGhpcy5fb3B0aW9ucy5pbmxpbmVTb3VyY2VNYXAgPSBmYWxzZTtcblx0XHR0aGlzLl9vcHRpb25zLmRlY2xhcmF0aW9uID0gZmFsc2U7XG5cdFx0dGhpcy5fb3B0aW9ucy5pc29sYXRlZE1vZHVsZXMgPSB0cnVlO1xuXHRcdHRoaXMuX29wdGlvbnMubW9kdWxlID0gdHMuTW9kdWxlS2luZC5TeXN0ZW07XG5cdH1cblxuXHRwdWJsaWMgdHJhbnNwaWxlKHNvdXJjZU5hbWU6IHN0cmluZywgc291cmNlOiBzdHJpbmcpOiBUcmFuc3BpbGVSZXN1bHQge1xuXHRcdGxvZ2dlci5kZWJ1ZyhgdHJhbnNwaWxpbmcgJHtzb3VyY2VOYW1lfWApO1xuXG5cdFx0bGV0IHNvdXJjZUZpbGUgPSB0aGlzLl9ob3N0LmFkZEZpbGUoc291cmNlTmFtZSwgc291cmNlKTtcblx0XHRsZXQgcHJvZ3JhbSA9IHRzLmNyZWF0ZVByb2dyYW0oW3NvdXJjZU5hbWVdLCB0aGlzLl9vcHRpb25zLCB0aGlzLl9ob3N0KTtcblxuXHRcdGxldCBqc3RleHQ6IHN0cmluZyA9IHVuZGVmaW5lZDtcblx0XHRsZXQgbWFwdGV4dDogc3RyaW5nID0gdW5kZWZpbmVkO1xuXG5cdFx0Ly8gRW1pdFxuXHRcdGxldCBlbWl0UmVzdWx0ID0gcHJvZ3JhbS5lbWl0KHVuZGVmaW5lZCwgKG91dHB1dE5hbWUsIG91dHB1dCkgPT4ge1xuXHRcdFx0aWYgKGlzSmF2YVNjcmlwdChvdXRwdXROYW1lKSlcblx0XHRcdFx0anN0ZXh0ID0gb3V0cHV0LnNsaWNlKDAsIG91dHB1dC5sYXN0SW5kZXhPZihcIi8vI1wiKSk7IC8vIHJlbW92ZSBzb3VyY2VNYXBwaW5nVVJMXG5cdFx0XHRlbHNlIGlmIChpc1NvdXJjZU1hcChvdXRwdXROYW1lKSlcblx0XHRcdFx0bWFwdGV4dCA9IG91dHB1dDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIG91cHV0IGZpbGUgJHtvdXRwdXROYW1lfWApXG5cdFx0fSk7XG5cblx0XHRsZXQgZGlhZ25vc3RpY3MgPSBwcm9ncmFtLmdldFN5bnRhY3RpY0RpYWdub3N0aWNzKCkuY29uY2F0KGVtaXRSZXN1bHQuZGlhZ25vc3RpY3MpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGZhaWx1cmU6IHRoaXMuaGFzRXJyb3IoZGlhZ25vc3RpY3MpLFxuXHRcdFx0ZXJyb3JzOiBkaWFnbm9zdGljcyxcblx0XHRcdGpzOiBqc3RleHQsXG5cdFx0XHRzb3VyY2VNYXA6IG1hcHRleHRcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGhhc0Vycm9yKGRpYWdzOiBBcnJheTx0cy5EaWFnbm9zdGljPik6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBkaWFncy5zb21lKGRpYWcgPT4gKGRpYWcuY2F0ZWdvcnkgPT09IHRzLkRpYWdub3N0aWNDYXRlZ29yeS5FcnJvcikpXG5cdH1cbn1cbiJdfQ==