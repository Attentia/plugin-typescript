var ts = require('typescript');
var logger_1 = require('./logger');
var utils_1 = require("./utils");
var logger = new logger_1.default({ debug: false });
var Transpiler = (function () {
    function Transpiler(host) {
        this._host = host;
        this._options = Object.assign({}, this._host.options);
        if (this._options.sourceMap === undefined)
            this._options.sourceMap = this._options.inlineSourceMap;
        if (this._options.sourceMap === undefined)
            this._options.sourceMap = true;
        this._options.inlineSourceMap = false;
        this._options.declaration = false;
        this._options.isolatedModules = true;
    }
    Transpiler.prototype.transpile = function (sourceName, source) {
        logger.debug("transpiling " + sourceName);
        var sourceFile = this._host.addFile(sourceName, source);
        var program = ts.createProgram([sourceName], this._options, this._host);
        var jstext = undefined;
        var maptext = undefined;
        var emitResult = program.emit(undefined, function (outputName, output) {
            if (utils_1.isJavaScript(outputName))
                jstext = output.slice(0, output.lastIndexOf("//#"));
            else if (utils_1.isSourceMap(outputName))
                maptext = output;
            else
                throw new Error("unexpected ouput file " + outputName);
        });
        var diagnostics = program.getSyntacticDiagnostics().concat(emitResult.diagnostics);
        return {
            failure: this.hasError(diagnostics),
            errors: diagnostics,
            js: jstext,
            sourceMap: maptext
        };
    };
    Transpiler.prototype.hasError = function (diags) {
        return diags.some(function (diag) { return (diag.category === ts.DiagnosticCategory.Error); });
    };
    return Transpiler;
})();
exports.Transpiler = Transpiler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNwaWxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90cmFuc3BpbGVyLnRzIl0sIm5hbWVzIjpbIlRyYW5zcGlsZXIiLCJUcmFuc3BpbGVyLmNvbnN0cnVjdG9yIiwiVHJhbnNwaWxlci50cmFuc3BpbGUiLCJUcmFuc3BpbGVyLmhhc0Vycm9yIl0sIm1hcHBpbmdzIjoiQUFDQSxJQUFZLEVBQUUsV0FBTSxZQUFZLENBQUMsQ0FBQTtBQUVqQyx1QkFBbUIsVUFBVSxDQUFDLENBQUE7QUFDOUIsc0JBQXdDLFNBQVMsQ0FBQyxDQUFBO0FBRWxELElBQUksTUFBTSxHQUFHLElBQUksZ0JBQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBUzFDO0lBSUNBLG9CQUFZQSxJQUFrQkE7UUFDN0JDLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBO1FBRWxCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUV0REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsS0FBS0EsU0FBU0EsQ0FBQ0E7WUFDekNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLGVBQWVBLENBQUNBO1FBRXpEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxLQUFLQSxTQUFTQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFaENBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLGVBQWVBLEdBQUdBLEtBQUtBLENBQUNBO1FBQ3RDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxXQUFXQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUNsQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsZUFBZUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDdENBLENBQUNBO0lBRU1ELDhCQUFTQSxHQUFoQkEsVUFBaUJBLFVBQWtCQSxFQUFFQSxNQUFjQTtRQUNsREUsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsaUJBQWVBLFVBQVlBLENBQUNBLENBQUNBO1FBRTFDQSxJQUFJQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFVQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUN4REEsSUFBSUEsT0FBT0EsR0FBR0EsRUFBRUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFeEVBLElBQUlBLE1BQU1BLEdBQVdBLFNBQVNBLENBQUNBO1FBQy9CQSxJQUFJQSxPQUFPQSxHQUFXQSxTQUFTQSxDQUFDQTtRQUdoQ0EsSUFBSUEsVUFBVUEsR0FBR0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsRUFBRUEsVUFBQ0EsVUFBVUEsRUFBRUEsTUFBTUE7WUFDM0RBLEVBQUVBLENBQUNBLENBQUNBLG9CQUFZQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtnQkFDNUJBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLEVBQUVBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBO1lBQ3JEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxtQkFBV0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2hDQSxPQUFPQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUNsQkEsSUFBSUE7Z0JBQ0hBLE1BQU1BLElBQUlBLEtBQUtBLENBQUNBLDJCQUF5QkEsVUFBWUEsQ0FBQ0EsQ0FBQUE7UUFDeERBLENBQUNBLENBQUNBLENBQUNBO1FBRUhBLElBQUlBLFdBQVdBLEdBQUdBLE9BQU9BLENBQUNBLHVCQUF1QkEsRUFBRUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7UUFFbkZBLE1BQU1BLENBQUNBO1lBQ05BLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFdBQVdBLENBQUNBO1lBQ25DQSxNQUFNQSxFQUFFQSxXQUFXQTtZQUNuQkEsRUFBRUEsRUFBRUEsTUFBTUE7WUFDVkEsU0FBU0EsRUFBRUEsT0FBT0E7U0FDbEJBLENBQUFBO0lBQ0ZBLENBQUNBO0lBRU9GLDZCQUFRQSxHQUFoQkEsVUFBaUJBLEtBQTJCQTtRQUMzQ0csTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQUEsSUFBSUEsSUFBSUEsT0FBQUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsS0FBS0EsRUFBRUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUEvQ0EsQ0FBK0NBLENBQUNBLENBQUFBO0lBQzNFQSxDQUFDQTtJQUNGSCxpQkFBQ0E7QUFBREEsQ0FBQ0EsQUFwREQsSUFvREM7QUFwRFksa0JBQVUsYUFvRHRCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqL1xuaW1wb3J0ICogYXMgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5pbXBvcnQge0NvbXBpbGVySG9zdCwgQ29tYmluZWRPcHRpb25zfSBmcm9tICcuL2NvbXBpbGVyLWhvc3QnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQge2lzSmF2YVNjcmlwdCwgaXNTb3VyY2VNYXB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmxldCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHsgZGVidWc6IGZhbHNlIH0pO1xuXG5pbnRlcmZhY2UgVHJhbnNwaWxlUmVzdWx0IHtcblx0ZmFpbHVyZTogYm9vbGVhbjtcblx0ZXJyb3JzOiBBcnJheTx0cy5EaWFnbm9zdGljPjtcblx0anM6IHN0cmluZztcblx0c291cmNlTWFwOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBUcmFuc3BpbGVyIHtcblx0cHJpdmF0ZSBfaG9zdDogQ29tcGlsZXJIb3N0O1xuXHRwcml2YXRlIF9vcHRpb25zOiBDb21iaW5lZE9wdGlvbnM7XG5cblx0Y29uc3RydWN0b3IoaG9zdDogQ29tcGlsZXJIb3N0KSB7XG5cdFx0dGhpcy5faG9zdCA9IGhvc3Q7XG5cblx0XHR0aGlzLl9vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5faG9zdC5vcHRpb25zKTtcblxuXHRcdGlmICh0aGlzLl9vcHRpb25zLnNvdXJjZU1hcCA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0dGhpcy5fb3B0aW9ucy5zb3VyY2VNYXAgPSB0aGlzLl9vcHRpb25zLmlubGluZVNvdXJjZU1hcDtcblxuXHRcdGlmICh0aGlzLl9vcHRpb25zLnNvdXJjZU1hcCA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0dGhpcy5fb3B0aW9ucy5zb3VyY2VNYXAgPSB0cnVlO1xuXG5cdFx0dGhpcy5fb3B0aW9ucy5pbmxpbmVTb3VyY2VNYXAgPSBmYWxzZTtcblx0XHR0aGlzLl9vcHRpb25zLmRlY2xhcmF0aW9uID0gZmFsc2U7XG5cdFx0dGhpcy5fb3B0aW9ucy5pc29sYXRlZE1vZHVsZXMgPSB0cnVlO1xuXHR9XG5cblx0cHVibGljIHRyYW5zcGlsZShzb3VyY2VOYW1lOiBzdHJpbmcsIHNvdXJjZTogc3RyaW5nKTogVHJhbnNwaWxlUmVzdWx0IHtcblx0XHRsb2dnZXIuZGVidWcoYHRyYW5zcGlsaW5nICR7c291cmNlTmFtZX1gKTtcblxuXHRcdGxldCBzb3VyY2VGaWxlID0gdGhpcy5faG9zdC5hZGRGaWxlKHNvdXJjZU5hbWUsIHNvdXJjZSk7XG5cdFx0bGV0IHByb2dyYW0gPSB0cy5jcmVhdGVQcm9ncmFtKFtzb3VyY2VOYW1lXSwgdGhpcy5fb3B0aW9ucywgdGhpcy5faG9zdCk7XG5cblx0XHRsZXQganN0ZXh0OiBzdHJpbmcgPSB1bmRlZmluZWQ7XG5cdFx0bGV0IG1hcHRleHQ6IHN0cmluZyA9IHVuZGVmaW5lZDtcblxuXHRcdC8vIEVtaXRcblx0XHRsZXQgZW1pdFJlc3VsdCA9IHByb2dyYW0uZW1pdCh1bmRlZmluZWQsIChvdXRwdXROYW1lLCBvdXRwdXQpID0+IHtcblx0XHRcdGlmIChpc0phdmFTY3JpcHQob3V0cHV0TmFtZSkpXG5cdFx0XHRcdGpzdGV4dCA9IG91dHB1dC5zbGljZSgwLCBvdXRwdXQubGFzdEluZGV4T2YoXCIvLyNcIikpOyAvLyByZW1vdmUgc291cmNlTWFwcGluZ1VSTFxuXHRcdFx0ZWxzZSBpZiAoaXNTb3VyY2VNYXAob3V0cHV0TmFtZSkpXG5cdFx0XHRcdG1hcHRleHQgPSBvdXRwdXQ7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgdW5leHBlY3RlZCBvdXB1dCBmaWxlICR7b3V0cHV0TmFtZX1gKVxuXHRcdH0pO1xuXG5cdFx0bGV0IGRpYWdub3N0aWNzID0gcHJvZ3JhbS5nZXRTeW50YWN0aWNEaWFnbm9zdGljcygpLmNvbmNhdChlbWl0UmVzdWx0LmRpYWdub3N0aWNzKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRmYWlsdXJlOiB0aGlzLmhhc0Vycm9yKGRpYWdub3N0aWNzKSxcblx0XHRcdGVycm9yczogZGlhZ25vc3RpY3MsXG5cdFx0XHRqczoganN0ZXh0LFxuXHRcdFx0c291cmNlTWFwOiBtYXB0ZXh0XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBoYXNFcnJvcihkaWFnczogQXJyYXk8dHMuRGlhZ25vc3RpYz4pOiBib29sZWFuIHtcblx0XHRyZXR1cm4gZGlhZ3Muc29tZShkaWFnID0+IChkaWFnLmNhdGVnb3J5ID09PSB0cy5EaWFnbm9zdGljQ2F0ZWdvcnkuRXJyb3IpKVxuXHR9XG59XG4iXX0=