var ts = require('typescript');
var logger_1 = require('./logger');
var factory_1 = require('./factory');
var format_errors_1 = require('./format-errors');
var utils_1 = require('./utils');
var logger = new logger_1.default({ debug: false });
var factory = factory_1.createFactory(System.typescriptOptions, _resolve, _fetch);
function translate(load) {
    logger.debug("systemjs translating " + load.address);
    return factory.then(function (_a) {
        var transpiler = _a.transpiler, typeChecker = _a.typeChecker, host = _a.host;
        var result = transpiler.transpile(load.address, load.source);
        format_errors_1.formatErrors(result.errors, logger);
        if (result.failure)
            throw new Error("TypeScript transpilation failed");
        if (host.options.typeCheck && utils_1.isTypescript(load.address)) {
            typeChecker.check(load.address, load.source)
                .catch(function (err) { return logger.error(err.message); })
                .then(function (diags) {
                format_errors_1.formatErrors(diags, logger);
                if (host.options.typeCheck === "strict") {
                    if (diags.some(function (diag) { return diag.category === ts.DiagnosticCategory.Error; }))
                        throw new Error("TypeScript found type errors");
                }
            });
        }
        load.source = wrapSource(result.js, load);
        load.metadata.sourceMap = result.sourceMap;
        load.metadata.format = 'register';
        return load;
    });
}
exports.translate = translate;
function wrapSource(source, load) {
    return '(function(__moduleName){' + source + '\n})("' + load.name + '");\n//# sourceURL=' + load.address + '!transpiled';
}
function _resolve(dep, parent) {
    return System.normalize(dep, parent)
        .then(function (normalized) {
        if (normalized.slice(-6) == '.ts.js')
            normalized = normalized.slice(0, -3);
        else if (normalized.slice(-8) == '.json.js')
            normalized = normalized.slice(0, -3);
        else if (normalized.slice(-8) == '.json.ts')
            normalized = normalized.slice(0, -3);
        logger.debug("resolved " + normalized + " (" + parent + " -> " + dep + ")");
        return normalized;
    });
}
function _fetch(address) {
    return System.fetch({ address: address, name: address, metadata: {} })
        .then(function (text) {
        logger.debug("fetched " + address);
        return text;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3BsdWdpbi50cyJdLCJuYW1lcyI6WyJ0cmFuc2xhdGUiLCJ3cmFwU291cmNlIiwiX3Jlc29sdmUiLCJfZmV0Y2giXSwibWFwcGluZ3MiOiJBQUNBLElBQVksRUFBRSxXQUFNLFlBQVksQ0FBQyxDQUFBO0FBQ2pDLHVCQUFtQixVQUFVLENBQUMsQ0FBQTtBQUM5Qix3QkFBNEIsV0FBVyxDQUFDLENBQUE7QUFDeEMsOEJBQTJCLGlCQUFpQixDQUFDLENBQUE7QUFDN0Msc0JBQTJCLFNBQVMsQ0FBQyxDQUFBO0FBRXJDLElBQUksTUFBTSxHQUFHLElBQUksZ0JBQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQzFDLElBQUksT0FBTyxHQUFHLHVCQUFhLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQVF4RSxtQkFBMEIsSUFBWTtJQUNyQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsMEJBQXdCQSxJQUFJQSxDQUFDQSxPQUFTQSxDQUFDQSxDQUFDQTtJQUVyREEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsRUFBK0JBO1lBQTlCQSxVQUFVQSxrQkFBRUEsV0FBV0EsbUJBQUVBLElBQUlBO1FBQ2xEQSxJQUFJQSxNQUFNQSxHQUFHQSxVQUFVQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUM3REEsNEJBQVlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO1FBRXBDQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQTtZQUNsQkEsTUFBTUEsSUFBSUEsS0FBS0EsQ0FBQ0EsaUNBQWlDQSxDQUFDQSxDQUFDQTtRQUVwREEs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QUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBRXRDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxjQUFZQSxVQUFVQSxVQUFLQSxNQUFNQSxZQUFPQSxHQUFHQSxNQUFHQSxDQUFDQSxDQUFDQTtRQUM3REEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7SUFDbkJBLENBQUNBLENBQUNBLENBQUNBO0FBQ0xBLENBQUNBO0FBS0QsZ0JBQWdCLE9BQWU7SUFDOUJDLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLEVBQUVBLE9BQU9BLEVBQUVBLE9BQU9BLEVBQUVBLElBQUlBLEVBQUVBLE9BQU9BLEVBQUVBLFFBQVFBLEVBQUVBLEVBQUVBLEVBQUVBLENBQUNBO1NBQ3BFQSxJQUFJQSxDQUFDQSxVQUFBQSxJQUFJQTtRQUNUQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxhQUFXQSxPQUFTQSxDQUFDQSxDQUFDQTtRQUNuQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7SUFDYkEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7QUFDSkEsQ0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqL1xuaW1wb3J0ICogYXMgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7Y3JlYXRlRmFjdG9yeX0gZnJvbSAnLi9mYWN0b3J5JztcbmltcG9ydCB7Zm9ybWF0RXJyb3JzfSBmcm9tICcuL2Zvcm1hdC1lcnJvcnMnO1xuaW1wb3J0IHtpc1R5cGVzY3JpcHR9IGZyb20gJy4vdXRpbHMnO1xuXG5sZXQgbG9nZ2VyID0gbmV3IExvZ2dlcih7IGRlYnVnOiBmYWxzZSB9KTtcbmxldCBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShTeXN0ZW0udHlwZXNjcmlwdE9wdGlvbnMsIF9yZXNvbHZlLCBfZmV0Y2gpO1xuXG4vKlxuICogbG9hZC5uYW1lXG4gKiBsb2FkLmFkZHJlc3NcbiAqIGxvYWQubWV0YWRhdGFcbiAqIGxvYWQuc291cmNlOiB0aGUgZmV0Y2hlZCBzb3VyY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShsb2FkOiBNb2R1bGUpOiBQcm9taXNlPE1vZHVsZT4ge1xuXHRsb2dnZXIuZGVidWcoYHN5c3RlbWpzIHRyYW5zbGF0aW5nICR7bG9hZC5hZGRyZXNzfWApO1xuXG5cdHJldHVybiBmYWN0b3J5LnRoZW4oKHt0cmFuc3BpbGVyLCB0eXBlQ2hlY2tlciwgaG9zdH0pID0+IHtcblx0XHRsZXQgcmVzdWx0ID0gdHJhbnNwaWxlci50cmFuc3BpbGUobG9hZC5hZGRyZXNzLCBsb2FkLnNvdXJjZSk7XG5cdFx0Zm9ybWF0RXJyb3JzKHJlc3VsdC5lcnJvcnMsIGxvZ2dlcik7XG5cblx0XHRpZiAocmVzdWx0LmZhaWx1cmUpXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJUeXBlU2NyaXB0IHRyYW5zcGlsYXRpb24gZmFpbGVkXCIpO1xuXG5cdFx0aWYgKGhvc3Qub3B0aW9ucy50eXBlQ2hlY2sgJiYgaXNUeXBlc2NyaXB0KGxvYWQuYWRkcmVzcykpIHtcblx0XHRcdHR5cGVDaGVja2VyLmNoZWNrKGxvYWQuYWRkcmVzcywgbG9hZC5zb3VyY2UpXG5cdFx0XHRcdC5jYXRjaChlcnIgPT4gbG9nZ2VyLmVycm9yKGVyci5tZXNzYWdlKSlcblx0XHRcdFx0LnRoZW4oZGlhZ3MgPT4ge1xuXHRcdFx0XHRcdGZvcm1hdEVycm9ycyhkaWFncywgbG9nZ2VyKTtcblxuXHRcdFx0XHRcdGlmIChob3N0Lm9wdGlvbnMudHlwZUNoZWNrID09PSBcInN0cmljdFwiKSB7XG5cdFx0XHRcdFx0XHRpZiAoZGlhZ3Muc29tZShkaWFnID0+IGRpYWcuY2F0ZWdvcnkgPT09IHRzLkRpYWdub3N0aWNDYXRlZ29yeS5FcnJvcikpXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlR5cGVTY3JpcHQgZm91bmQgdHlwZSBlcnJvcnNcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHR9XG5cblx0XHRsb2FkLnNvdXJjZSA9IHdyYXBTb3VyY2UocmVzdWx0LmpzLCBsb2FkKTtcblx0XHRsb2FkLm1ldGFkYXRhLnNvdXJjZU1hcCA9IHJlc3VsdC5zb3VyY2VNYXA7XG5cdFx0bG9hZC5tZXRhZGF0YS5mb3JtYXQgPSAncmVnaXN0ZXInO1xuXHRcdHJldHVybiBsb2FkO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gd3JhcFNvdXJjZShzb3VyY2U6IHN0cmluZywgbG9hZDogTW9kdWxlKTogc3RyaW5nIHtcblx0Ly8gdGhpcyBzaG91bGQgcHJvYmFibHkgaGFwcGVuIGluIHN5c3RlbWpzXG5cdHJldHVybiAnKGZ1bmN0aW9uKF9fbW9kdWxlTmFtZSl7JyArIHNvdXJjZSArICdcXG59KShcIicgKyBsb2FkLm5hbWUgKyAnXCIpO1xcbi8vIyBzb3VyY2VVUkw9JyArIGxvYWQuYWRkcmVzcyArICchdHJhbnNwaWxlZCc7XG59XG5cbi8qXG4gKiBjYWxsZWQgYnkgdGhlIHR5cGUtY2hlY2tlciB3aGVuIGl0IG5lZWRzIHRvIHJlc29sdmUgYSBmaWxlXG4gKi9cbmZ1bmN0aW9uIF9yZXNvbHZlKGRlcDogc3RyaW5nLCBwYXJlbnQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG5cdC8vIFRPRE86IF9fbW9kdWxlTmFtZSBpcyBub3QgYXZhaWxhYmxlIHdpdGhvdXQgYSBidWlsdC1pbiB0cmFuc3BpbGVyXG5cdC8vaWYgKCFwYXJlbnQpIHBhcmVudCA9IF9fbW9kdWxlTmFtZTtcblxuXHRyZXR1cm4gU3lzdGVtLm5vcm1hbGl6ZShkZXAsIHBhcmVudClcblx0XHQudGhlbihub3JtYWxpemVkID0+IHtcblx0XHRcdGlmIChub3JtYWxpemVkLnNsaWNlKC02KSA9PSAnLnRzLmpzJylcblx0XHRcdFx0bm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQuc2xpY2UoMCwgLTMpO1xuXHRcdFx0ZWxzZSBpZiAobm9ybWFsaXplZC5zbGljZSgtOCkgPT0gJy5qc29uLmpzJylcblx0XHRcdFx0bm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQuc2xpY2UoMCwgLTMpO1xuXHRcdFx0ZWxzZSBpZiAobm9ybWFsaXplZC5zbGljZSgtOCkgPT0gJy5qc29uLnRzJylcblx0XHRcdFx0bm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQuc2xpY2UoMCwgLTMpO1xuXG5cdFx0XHRsb2dnZXIuZGVidWcoYHJlc29sdmVkICR7bm9ybWFsaXplZH0gKCR7cGFyZW50fSAtPiAke2RlcH0pYCk7XG5cdFx0XHRyZXR1cm4gbm9ybWFsaXplZDtcblx0XHR9KTtcbn1cblxuLypcbiAqIGNhbGxlZCBieSB0aGUgdHlwZS1jaGVja2VyIHdoZW4gaXQgbmVlZHMgdG8gZmV0Y2ggYSBmaWxlXG4gKi9cbmZ1bmN0aW9uIF9mZXRjaChhZGRyZXNzOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRyZXR1cm4gU3lzdGVtLmZldGNoKHsgYWRkcmVzczogYWRkcmVzcywgbmFtZTogYWRkcmVzcywgbWV0YWRhdGE6IHt9IH0pXG5cdFx0LnRoZW4odGV4dCA9PiB7XG5cdFx0XHRsb2dnZXIuZGVidWcoYGZldGNoZWQgJHthZGRyZXNzfWApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fSlcbn1cbiJdfQ==