var ts = require('typescript');
var logger_1 = require('./logger');
var factory_1 = require('./factory');
var format_errors_1 = require('./format-errors');
var utils_1 = require('./utils');
var logger = new logger_1.default({ debug: false });
var factory = factory_1.createFactory(System.typescriptOptions, _resolve, _fetch);
var typeCheckErrored = false;
function translate(load) {
    var _this = this;
    logger.debug("systemjs translating " + load.address);
    return factory.then(function (_a) {
        var transpiler = _a.transpiler, typeChecker = _a.typeChecker, host = _a.host;
        var result = transpiler.transpile(load.address, load.source);
        format_errors_1.formatErrors(result.errors, logger);
        if (result.failure)
            throw new Error("TypeScript transpilation failed");
        if (host.options.typeCheck && utils_1.isTypescript(load.address)) {
            typeChecker.check(load.address, load.source)
                .catch(function (err) { return logger.error(err.message); })
                .then(function (diags) {
                format_errors_1.formatErrors(diags, logger);
                if (diags.some(function (diag) { return diag.category === ts.DiagnosticCategory.Error; }))
                    typeCheckErrored = true;
            });
        }
        if (_this.loader && (host.options.module === 4))
            load.source = wrapSource(result.js, load);
        else
            load.source = result.js;
        if (result.sourceMap)
            load.metadata.sourceMap = JSON.parse(result.sourceMap);
        if (host.options.module === 4)
            load.metadata.format = 'register';
        else if (host.options.module === 5)
            load.metadata.format = 'esm';
        return load.source;
    });
}
exports.translate = translate;
function wrapSource(source, load) {
    return '(function(__moduleName){' + source + '\n})("' + load.name + '");\n//# sourceURL=' + load.address + '!transpiled';
}
function bundle() {
    if (typeCheckErrored && System.typescriptOptions.typeCheck === "strict") {
        typeCheckErrored = false;
        throw new Error("TypeScript found type errors");
    }
    return [];
}
exports.bundle = bundle;
function _resolve(dep, parent) {
    return System.normalize(dep, parent)
        .then(function (normalized) {
        normalized = utils_1.stripDoubleExtension(normalized);
        logger.debug("resolved " + normalized + " (" + parent + " -> " + dep + ")");
        return normalized;
    });
}
function _fetch(address) {
    return System.fetch({ address: address, name: address, metadata: {} })
        .then(function (text) {
        logger.debug("fetched " + address);
        return text;
    });
}
//# sourceMappingURL=data:application/json;base64,