var ts = require('typescript');
var logger_1 = require('./logger');
var factory_1 = require('./factory');
var format_errors_1 = require('./format-errors');
var utils_1 = require('./utils');
var logger = new logger_1.default({ debug: false });
var factory = factory_1.createFactory(System.typescriptOptions, _resolve, _fetch);
function translate(load) {
    logger.debug("systemjs translating " + load.address);
    return factory.then(function (_a) {
        var transpiler = _a.transpiler, typeChecker = _a.typeChecker, host = _a.host;
        var result = transpiler.transpile(load.address, load.source);
        format_errors_1.formatErrors(result.errors, logger);
        if (result.failure)
            throw new Error("TypeScript transpilation failed");
        if (host.options.typeCheck && utils_1.isTypescript(load.address)) {
            typeChecker.check(load.address, load.source)
                .catch(function (err) { return logger.error(err.message); })
                .then(function (diags) {
                format_errors_1.formatErrors(diags, logger);
                if (host.options.typeCheck === "strict") {
                    if (diags.some(function (diag) { return diag.category === ts.DiagnosticCategory.Error; }))
                        throw new Error("TypeScript found type errors");
                }
            });
        }
        load.source = wrapSource(result.js, load);
        load.metadata.sourceMap = result.sourceMap;
        load.metadata.format = 'register';
        return load;
    });
}
exports.translate = translate;
function wrapSource(source, load) {
    return '(function(__moduleName){' + source + '\n})("' + load.name + '");\n//# sourceURL=' + load.address + '!transpiled';
}
function _resolve(dep, parent) {
    return System.normalize(dep, parent)
        .then(function (normalized) {
        if (normalized.slice(-6) == '.ts.js')
            normalized = normalized.slice(0, -3);
        else if (normalized.slice(-8) == '.json.js')
            normalized = normalized.slice(0, -3);
        logger.debug("resolved " + normalized + " (" + parent + " -> " + dep + ")");
        return normalized;
    });
}
function _fetch(address) {
    return System.fetch({ address: address, name: address, metadata: {} })
        .then(function (text) {
        logger.debug("fetched " + address);
        return text;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3BsdWdpbi50cyJdLCJuYW1lcyI6WyJ0cmFuc2xhdGUiLCJ3cmFwU291cmNlIiwiX3Jlc29sdmUiLCJfZmV0Y2giXSwibWFwcGluZ3MiOiJBQUNBLElBQVksRUFBRSxXQUFNLFlBQVksQ0FBQyxDQUFBO0FBQ2pDLHVCQUFtQixVQUFVLENBQUMsQ0FBQTtBQUM5Qix3QkFBNEIsV0FBVyxDQUFDLENBQUE7QUFDeEMsOEJBQTJCLGlCQUFpQixDQUFDLENBQUE7QUFDN0Msc0JBQTJCLFNBQVMsQ0FBQyxDQUFBO0FBRXJDLElBQUksTUFBTSxHQUFHLElBQUksZ0JBQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQzFDLElBQUksT0FBTyxHQUFHLHVCQUFhLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQVF4RSxtQkFBMEIsSUFBWTtJQUNyQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsMEJBQXdCQSxJQUFJQSxDQUFDQSxPQUFTQSxDQUFDQSxDQUFDQTtJQUVyREEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsRUFBK0JBO1lBQTlCQSxVQUFVQSxrQkFBRUEsV0FBV0EsbUJBQUVBLElBQUlBO1FBQ2xEQSxJQUFJQSxNQUFNQSxHQUFHQSxVQUFVQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUM3REEsNEJBQVlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO1FBRXBDQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQTtZQUNsQkEsTUFBTUEsSUFBSUEsS0FBS0EsQ0FBQ0EsaUNBQWlDQSxDQUFDQSxDQUFDQTtRQUVwREEs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QUNMQSxDQUFDQTtBQUtELGdCQUFnQixPQUFlO0lBQzlCQyxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUFFQSxPQUFPQSxFQUFFQSxPQUFPQSxFQUFFQSxJQUFJQSxFQUFFQSxPQUFPQSxFQUFFQSxRQUFRQSxFQUFFQSxFQUFFQSxFQUFFQSxDQUFDQTtTQUNwRUEsSUFBSUEsQ0FBQ0EsVUFBQUEsSUFBSUE7UUFDVEEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsYUFBV0EsT0FBU0EsQ0FBQ0EsQ0FBQ0E7UUFDbkNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO0lBQ2JBLENBQUNBLENBQUNBLENBQUFBO0FBQ0pBLENBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyogKi9cbmltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQge2NyZWF0ZUZhY3Rvcnl9IGZyb20gJy4vZmFjdG9yeSc7XG5pbXBvcnQge2Zvcm1hdEVycm9yc30gZnJvbSAnLi9mb3JtYXQtZXJyb3JzJztcbmltcG9ydCB7aXNUeXBlc2NyaXB0fSBmcm9tICcuL3V0aWxzJztcblxubGV0IGxvZ2dlciA9IG5ldyBMb2dnZXIoeyBkZWJ1ZzogZmFsc2UgfSk7XG5sZXQgZmFjdG9yeSA9IGNyZWF0ZUZhY3RvcnkoU3lzdGVtLnR5cGVzY3JpcHRPcHRpb25zLCBfcmVzb2x2ZSwgX2ZldGNoKTtcblxuLypcbiAqIGxvYWQubmFtZVxuICogbG9hZC5hZGRyZXNzXG4gKiBsb2FkLm1ldGFkYXRhXG4gKiBsb2FkLnNvdXJjZTogdGhlIGZldGNoZWQgc291cmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUobG9hZDogTW9kdWxlKTogUHJvbWlzZTxNb2R1bGU+IHtcblx0bG9nZ2VyLmRlYnVnKGBzeXN0ZW1qcyB0cmFuc2xhdGluZyAke2xvYWQuYWRkcmVzc31gKTtcblxuXHRyZXR1cm4gZmFjdG9yeS50aGVuKCh7dHJhbnNwaWxlciwgdHlwZUNoZWNrZXIsIGhvc3R9KSA9PiB7XG5cdFx0bGV0IHJlc3VsdCA9IHRyYW5zcGlsZXIudHJhbnNwaWxlKGxvYWQuYWRkcmVzcywgbG9hZC5zb3VyY2UpO1xuXHRcdGZvcm1hdEVycm9ycyhyZXN1bHQuZXJyb3JzLCBsb2dnZXIpO1xuXG5cdFx0aWYgKHJlc3VsdC5mYWlsdXJlKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVHlwZVNjcmlwdCB0cmFuc3BpbGF0aW9uIGZhaWxlZFwiKTtcblxuXHRcdGlmIChob3N0Lm9wdGlvbnMudHlwZUNoZWNrICYmIGlzVHlwZXNjcmlwdChsb2FkLmFkZHJlc3MpKSB7XG5cdFx0XHR0eXBlQ2hlY2tlci5jaGVjayhsb2FkLmFkZHJlc3MsIGxvYWQuc291cmNlKVxuXHRcdFx0XHQuY2F0Y2goZXJyID0+IGxvZ2dlci5lcnJvcihlcnIubWVzc2FnZSkpXG5cdFx0XHRcdC50aGVuKGRpYWdzID0+IHtcblx0XHRcdFx0XHRmb3JtYXRFcnJvcnMoZGlhZ3MsIGxvZ2dlcik7XG5cblx0XHRcdFx0XHRpZiAoaG9zdC5vcHRpb25zLnR5cGVDaGVjayA9PT0gXCJzdHJpY3RcIikge1xuXHRcdFx0XHRcdFx0aWYgKGRpYWdzLnNvbWUoZGlhZyA9PiBkaWFnLmNhdGVnb3J5ID09PSB0cy5EaWFnbm9zdGljQ2F0ZWdvcnkuRXJyb3IpKVxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJUeXBlU2NyaXB0IGZvdW5kIHR5cGUgZXJyb3JzXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0bG9hZC5zb3VyY2UgPSB3cmFwU291cmNlKHJlc3VsdC5qcywgbG9hZCk7XG5cdFx0bG9hZC5tZXRhZGF0YS5zb3VyY2VNYXAgPSByZXN1bHQuc291cmNlTWFwO1xuXHRcdGxvYWQubWV0YWRhdGEuZm9ybWF0ID0gJ3JlZ2lzdGVyJztcblx0XHRyZXR1cm4gbG9hZDtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIHdyYXBTb3VyY2Uoc291cmNlOiBzdHJpbmcsIGxvYWQ6IE1vZHVsZSk6IHN0cmluZyB7XG5cdC8vIHRoaXMgc2hvdWxkIHByb2JhYmx5IGhhcHBlbiBpbiBzeXN0ZW1qc1xuXHRyZXR1cm4gJyhmdW5jdGlvbihfX21vZHVsZU5hbWUpeycgKyBzb3VyY2UgKyAnXFxufSkoXCInICsgbG9hZC5uYW1lICsgJ1wiKTtcXG4vLyMgc291cmNlVVJMPScgKyBsb2FkLmFkZHJlc3MgKyAnIXRyYW5zcGlsZWQnO1xufVxuXG4vKlxuICogY2FsbGVkIGJ5IHRoZSB0eXBlLWNoZWNrZXIgd2hlbiBpdCBuZWVkcyB0byByZXNvbHZlIGEgZmlsZVxuICovXG5mdW5jdGlvbiBfcmVzb2x2ZShkZXA6IHN0cmluZywgcGFyZW50OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuXHQvLyBUT0RPOiBfX21vZHVsZU5hbWUgaXMgbm90IGF2YWlsYWJsZSB3aXRob3V0IGEgYnVpbHQtaW4gdHJhbnNwaWxlclxuXHQvL2lmICghcGFyZW50KSBwYXJlbnQgPSBfX21vZHVsZU5hbWU7XG5cblx0cmV0dXJuIFN5c3RlbS5ub3JtYWxpemUoZGVwLCBwYXJlbnQpXG5cdFx0LnRoZW4obm9ybWFsaXplZCA9PiB7XG5cdFx0XHRpZiAobm9ybWFsaXplZC5zbGljZSgtNikgPT0gJy50cy5qcycpXG5cdFx0XHRcdG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkLnNsaWNlKDAsIC0zKTtcblx0XHRcdGVsc2UgaWYgKG5vcm1hbGl6ZWQuc2xpY2UoLTgpID09ICcuanNvbi5qcycpXG5cdFx0XHRcdG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkLnNsaWNlKDAsIC0zKTtcblxuXHRcdFx0bG9nZ2VyLmRlYnVnKGByZXNvbHZlZCAke25vcm1hbGl6ZWR9ICgke3BhcmVudH0gLT4gJHtkZXB9KWApO1xuXHRcdFx0cmV0dXJuIG5vcm1hbGl6ZWQ7XG5cdFx0fSk7XG59XG5cbi8qXG4gKiBjYWxsZWQgYnkgdGhlIHR5cGUtY2hlY2tlciB3aGVuIGl0IG5lZWRzIHRvIGZldGNoIGEgZmlsZVxuICovXG5mdW5jdGlvbiBfZmV0Y2goYWRkcmVzczogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0cmV0dXJuIFN5c3RlbS5mZXRjaCh7IGFkZHJlc3M6IGFkZHJlc3MsIG5hbWU6IGFkZHJlc3MsIG1ldGFkYXRhOiB7fSB9KVxuXHRcdC50aGVuKHRleHQgPT4ge1xuXHRcdFx0bG9nZ2VyLmRlYnVnKGBmZXRjaGVkICR7YWRkcmVzc31gKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH0pXG59XG4iXX0=